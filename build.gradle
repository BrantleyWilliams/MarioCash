buildscript {
    ext {
        springBootVersion      = '2.0.1.RELEASE'
        protobufPluginVersion  = '0.8.3'
        dockerPluginVersion    = '0.20.1'
        coverallsPluginVersion = '2.8.2'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.google.protobuf:protobuf-gradle-plugin:${protobufPluginVersion}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${dockerPluginVersion}")
        classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:${coverallsPluginVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'

group = 'dev.zhihexireng'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

defaultTasks ':mariocash-node:bootRun'

ext {
    grpcVersion         = '1.12.0'
    levelDBVersion      = '0.10'
    commonsCodecVersion = '1.10'
    commonsIOVersion    = '2.4'
    ehcacheVersion      = '3.5.2'
    scastleVersion      = '1.58.0.0'
    jsonrpc4jVersion    = '1.3.2'
    jsonSimpleVersion   = '1.1'
    jacksonVersion      = '2.9.5'
    typesafeVersion     = '1.3.3'
    protobufVersion     = '3.5.1-1'
}

allprojects {
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'

    repositories {
        mavenCentral()
        jcenter()
    }
}

subprojects {
    apply plugin: 'java'

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    checkstyle {
        ignoreFailures = false
        toolVersion = '8.11'
        sourceSets = [project.sourceSets.main]
        maxWarnings = 0
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }
}

project(':mariocash-core') {
    apply plugin: 'com.google.protobuf'

    dependencies {
        compile("io.grpc:grpc-protobuf:${grpcVersion}")
        compile("io.grpc:grpc-stub:${grpcVersion}")
        compile("io.grpc:grpc-netty-shaded:${grpcVersion}")
        compile("org.iq80.leveldb:leveldb:${levelDBVersion}")
        compile("org.ehcache:ehcache:${ehcacheVersion}")
        compile("com.madgag.spongycastle:core:${scastleVersion}") // for SHA3 and SECP256K1
        compile("com.madgag.spongycastle:prov:${scastleVersion}") // for SHA3 and SECP256K1
        compile("commons-codec:commons-codec:${commonsCodecVersion}")
        compile("commons-io:commons-io:${commonsIOVersion}")
        compile("com.googlecode.json-simple:json-simple:${jsonSimpleVersion}")
        compile("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
        compile("com.typesafe:config:${typesafeVersion}")
        compile("ch.qos.logback:logback-classic:1.2.3")
        testCompile("io.grpc:grpc-testing:${grpcVersion}")
        testCompile("org.assertj:assertj-core:3.9.1")
        testCompile("org.mockito:mockito-core:2.15.0")
    }

    jar {
        enabled = true
    }

    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }

    sourceSets {
        main {
            java {
                srcDirs 'build/generated/source/proto/main/grpc'
                srcDirs 'build/generated/source/proto/main/java'
            }
        }
    }
}

project(':mariocash-node') {
    apply plugin: 'com.palantir.docker'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    dependencies {
        compile project(":mariocash-core")
        compile("com.github.briandilley.jsonrpc4j:jsonrpc4j:${jsonrpc4jVersion}")
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
        runtime('org.springframework.boot:spring-boot-devtools')
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    docker {
        dependsOn build
        dockerfile rootProject.file('docker/Dockerfile')
        name "mariocash/${bootJar.baseName}"
        files bootJar.archivePath
        buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
    }

    bootJar {
        launchScript()
    }

    test {
        systemProperty("spring.profiles.active", project.properties.get("springProfiles"))
        testLogging {
            afterSuite {desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    print "TEST:${result.resultType} (TOTAL:${result.testCount}, PASS:${result.successfulTestCount},"
                    println " FAIL:${result.failedTestCount}, SKIP:${result.skippedTestCount})"
                }
            }
        }
    }
}

task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                exclude: ['io/mariocash/proto/**']
            )
        })
    }

    reports {
        html.enabled = true // For Developer
        xml.enabled = true // For coveralls
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}
